const cursorCanvas = document.querySelector('.cursor--canvas'); const innerCursor = document.querySelector(".cursor--small"); const navTop = document.querySelector('.nav.top'); const btnMenu = document.querySelector('.menu'); const barsMenu = document.querySelector('.bars-menu'); const btnLeft = document.getElementById('btn-left'); const btnRight = document.getElementById('btn-right'); const mpEl = document.querySelectorAll('.mp'); const projects = document.querySelectorAll('.my-project'); const clicks = document.querySelectorAll('.click'); const enters = document.querySelectorAll('.enter'); const btnLink = document.querySelector('.email button'); const btnLinkMobile = document.querySelector('.email-m button'); const myLink = document.querySelectorAll('.my-link'); const myLinkMobile = document.querySelectorAll('.my-link-m'); const localTime = document.querySelector('.local-time'); const idxEl = document.querySelectorAll('.idx span'); let clientX = -100; let clientY = -100; let lastX = 0; let lastY = 0; let isStuck = false; let showCursor = false; let colorEl = 'rgba(0, 0, 0, 0.4)'; let idxProject = 0; let idxImg = 0; let idxLink = 0; let idxLinkMobile = 0; let shapeBounds = { width: 75, height: 75 }; let group, stuckX, stuckY, fillOuterCursor; let interval = setInterval(() => linkSwipe(), 5000);; addActiveClass(projects, 'active'); showFirst(); changeIdxEl(); HideOnMobile(); window.onresize = HideOnMobile; btnMenuClick(); initCursor(); initCanvas(); initHovers(); mousePseudo(btnLeft); mousePseudo(btnRight); btnLink.addEventListener('click', () => { clearInterval(interval); linkSwipe(); interval = setInterval(() => linkSwipe(), 5000); }); btnLinkMobile.addEventListener('click', () => { const removeShow = () => myLinkMobile.forEach(link => link.classList.remove('show')); if(idxLinkMobile < myLinkMobile.length - 1) { idxLinkMobile++; } else { idxLinkMobile = 0; }; removeShow(); myLinkMobile[idxLinkMobile].classList.add('show'); }); generateLocalTime(); setInterval(generateLocalTime, 10000); async function generateLocalTime() { const res = await fetch('https://timezoneapi.io/api/timezone/?Asia/Jakarta&token=aQoaYBMGgzWbMHFsrmFw'); const data = await res.json(); let day = data.data.datetime.day_abbr; let hours = data.data.datetime.time.slice(0, 2); let minutes = data.data.datetime.time.slice(3, 5); let amPm = data.data.datetime.hour_am_pm; if(hours >= 12) { hours = hours - 12; }; localTime.innerHTML = `Local time: ${hours}:${minutes} (${amPm}) - ${day}`; }; document.addEventListener('keydown', (e) => { if(e.keyCode === 13) { document.querySelector('.my-project.active').click(); }; if(e.keyCode === 37 || e.keyCode === 40) { btnLeft.style.opacity = 0; idxImg = 0; btnLeft.click(); }; if(e.keyCode === 39 || e.keyCode === 38) { btnRight.style.opacity = 0; idxImg = 0; btnRight.click(); }; }); document.addEventListener('keyup', (e) => { if(e.keyCode === 37 || e.keyCode === 40 || e.keyCode === 39 || e.keyCode === 38) { btnLeft.style.opacity = 1; btnRight.style.opacity = 1; }; }); projects.forEach(project => { project.addEventListener('click', () => { if(idxImg < project.children.length - 1) { idxImg++; } else { idxImg = 0; }; removeShow(); project.children[idxImg].classList.add('show'); }); }); btnLeft.addEventListener('click', () => { if(idxProject > 0) { idxProject--; } else { idxProject = projects.length - 1; }; idxImg = 0; removeShow(); addActiveClass(projects, 'active'); showFirst(); changeIdxEl(); }); btnRight.addEventListener('click', () => { if(idxProject < projects.length - 1) { idxProject++; } else { idxProject = 0; }; idxImg = 0; removeShow(); addActiveClass(projects, 'active'); showFirst(); changeIdxEl(); }); clicks.forEach(click => { click.addEventListener('mouseenter', () => innerCursor.style.animation = 'redClick 1s linear infinite'); click.addEventListener('mouseleave', () => innerCursor.style.animation = 'none'); }); function linkSwipe() { const removeShowHide = () => { myLink.forEach(link => { link.classList.remove('hide'); link.classList.remove('show'); }); }; if(idxLink <myLink.length - 1) { removeShowHide(); myLink[idxLink].classList.add('hide'); myLink[idxLink + 1].classList.add('show'); idxLink++; } else { removeShowHide(); myLink[idxLink].classList.add('hide'); idxLink = 0; myLink[0].classList.add('show'); }; }; function changeIdxEl() { idxEl.forEach((index, num) => { let zero = (num+1 <= 10) ? 0 : ''; index.innerText = `${zero}${num + 1}/${zero}${idxEl.length}`; }); }; function mousePseudo(el) { el.addEventListener(`mousedown`, () => { el.style.opacity = 0; }); el.addEventListener(`mouseup`, () => { el.style.opacity = 1; }); }; function addActiveClass(el, cls) { el.forEach(project => project.classList.remove(cls)); el[idxProject].classList.add(cls); }; function showFirst() { projects[idxProject].children[0].classList.add('show'); }; function removeShow() { mpEl.forEach(mp => mp.classList.remove('show')); }; function btnMenuClick() { let clicked = false; btnMenu.addEventListener('click', () => { if(!clicked){ btnMenu.innerText = 'close.'; barsMenu.classList.add('show'); clicked = true; } else { btnMenu.innerHTML = '<i class="fas fa-bars"></>'; barsMenu.classList.remove('show'); clicked = false; }; }); }; function HideOnMobile() { if(navigator.userAgent.match('Mobile')) { innerCursor.style.display = 'none'; cursorCanvas.style.display = 'none'; } else { innerCursor.style.display = 'block'; cursorCanvas.style.display = 'block'; }; }; function initCursor() { document.addEventListener("mousemove", e => { clientX = e.clientX; clientY = e.clientY; }); const render = () => { innerCursor.style.transform = `translate(${clientX}px, ${clientY}px)`; requestAnimationFrame(render); }; requestAnimationFrame(render); }; function initCanvas() { const canvas = document.querySelector(".cursor--canvas"); paper.setup(canvas); const strokeColor = colorEl; const strokeWidth = 1; const segments = 8; const radius = 15; const noiseScale = 150; const noiseRange = 4; let isNoisy = false; const polygon = new paper.Path.RegularPolygon( new paper.Point(0, 0), segments, radius ); polygon.strokeColor = strokeColor; polygon.strokeWidth = strokeWidth; polygon.smooth(); group = new paper.Group([polygon]); group.applyMatrix = false; const noiseObjects = polygon.segments.map(() => new SimplexNoise()); let bigCoordinates = []; const lerp = (a, b, n) => { return (1 - n) * a + n * b; }; const map = (value, in_min, in_max, out_min, out_max) => { return ( ((value - in_min) * (out_max - out_min)) / (in_max - in_min) + out_min ); }; paper.view.onFrame = event => { if (!isStuck) { lastX = lerp(lastX, clientX, 0.2); lastY = lerp(lastY, clientY, 0.2); group.position = new paper.Point(lastX, lastY); } else if (isStuck) { lastX = lerp(lastX, stuckX, 0.2); lastY = lerp(lastY, stuckY, 0.2); group.position = new paper.Point(lastX, lastY); }; if (isStuck && polygon.bounds.width < shapeBounds.width) { polygon.scale(1.08); } else if (!isStuck && polygon.bounds.width > 30) { if (isNoisy) { polygon.segments.forEach((segment, i) => { segment.point.set(bigCoordinates[i][0], bigCoordinates[i][1]); }); isNoisy = false; bigCoordinates = []; }; const scaleDown = 0.92; polygon.scale(scaleDown); }; if (isStuck && polygon.bounds.width >= shapeBounds.width) { isNoisy = true; if (bigCoordinates.length === 0) { polygon.segments.forEach((segment, i) => { bigCoordinates[i] = [segment.point.x, segment.point.y]; }); }; polygon.segments.forEach((segment, i) => { const noiseX = noiseObjects[i].noise2D(event.count / noiseScale, 0); const noiseY = noiseObjects[i].noise2D(event.count / noiseScale, 1); const distortionX = map(noiseX, -1, 1, -noiseRange, noiseRange); const distortionY = map(noiseY, -1, 1, -noiseRange, noiseRange); const newX = bigCoordinates[i][0] + distortionX; const newY = bigCoordinates[i][1] + distortionY; segment.point.set(newX, newY); }); }; polygon.smooth(); }; }; function initHovers() { function forEnter(e) { const navItem = e.currentTarget; const navItemBox = navItem.getBoundingClientRect(); stuckX = Math.round(navItemBox.left + navItemBox.width / 2); stuckY = Math.round(navItemBox.top + navItemBox.height / 2); isStuck = true; innerCursor.style.display = 'none'; }; function forLeave() { isStuck = false; innerCursor.style.display = 'block'; }; const handleMouseEnter = e => { forEnter(e); shapeBounds = { width: 75, height: 75 }; }; const handleMouseLeave = () => { forLeave(); }; const handleMouseEnterBtn = e => { forEnter(e); shapeBounds = { width: 35, height: 35 }; }; const handleMouseLeaveBtn = () => { forLeave(); }; const linkItems = document.querySelectorAll(".link"); linkItems.forEach(item => { item.addEventListener("mouseenter", handleMouseEnter); item.addEventListener("mouseleave", handleMouseLeave); }); const btnItems = document.querySelectorAll(".btn"); btnItems.forEach(btn => { btn.addEventListener("mouseenter", handleMouseEnterBtn); btn.addEventListener("mouseleave", handleMouseLeaveBtn); }); };